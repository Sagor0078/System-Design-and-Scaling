name: CI/CD Pipeline

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

env:
  PYTHON_VERSION: "3.11"

jobs:
  lint-and-format:
    name: Lint and Format Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          enable-cache: true

      - name: Set up Python
        run: uv python install ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          uv sync --dev
          cd app && uv sync --dev

      - name: Run ruff linter
        run: |
          uv run ruff check . --output-format=github
          cd app && uv run ruff check . --output-format=github

      - name: Run ruff formatter check
        run: |
          uv run ruff format --check .
          cd app && uv run ruff format --check .

      - name: Run mypy type checking
        run: |
          uv run mypy app/ tests/
          cd app && uv run mypy . --ignore-missing-imports

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: lint-and-format
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          enable-cache: true

      - name: Set up Python
        run: uv python install ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: uv sync --dev

      - name: Run pytest
        env:
          REDIS_HOST: localhost
          REDIS_PORT: 6379
        run: |
          uv run pytest tests/ -v --tb=short

      - name: Generate coverage report
        env:
          REDIS_HOST: localhost
          REDIS_PORT: 6379
        run: |
          uv add pytest-cov
          uv run pytest tests/ --cov=app --cov-report=xml --cov-report=html

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          fail_ci_if_error: false

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: lint-and-format
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          enable-cache: true

      - name: Set up Python
        run: uv python install ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: uv sync --dev

      - name: Run safety check
        run: |
          uv add safety
          uv run safety check

      - name: Run bandit security scan
        run: |
          uv add bandit
          uv run bandit -r app/ -f json -o bandit-report.json || true

  docker-build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./app
          push: false
          tags: scaling-system-app:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Docker image
        run: |
          docker run --rm -d --name test-app -p 8000:8000 scaling-system-app:latest
          sleep 10
          curl -f http://localhost:8000/health || exit 1
          docker stop test-app

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: docker-build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          enable-cache: true

      - name: Set up Python
        run: uv python install ${{ env.PYTHON_VERSION }}

      - name: Install test dependencies
        run: uv sync --dev

      - name: Start services with Docker Compose
        run: |
          docker-compose up -d --build
          sleep 30

      - name: Run integration tests
        run: |
          uv run python tests/test_system.py

      - name: Stop services
        if: always()
        run: docker-compose down

  