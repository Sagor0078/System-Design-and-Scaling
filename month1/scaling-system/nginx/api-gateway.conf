# Rate limiting zones
limit_req_zone $binary_remote_addr zone=api_limit:10m rate=20r/m;

# Upstream for load balancer
upstream load_balancer {
    server load-balancer:80;
}

server {
    listen 80;
    server_name localhost;
    
    # API Gateway health
    location /gateway-health {
        access_log off;
        return 200 "API Gateway healthy\n";
        add_header Content-Type text/plain;
    }
    
    # API routes with authentication and throttling
    location /api/ {
        # Rate limiting (backup to app-level)
        limit_req zone=api_limit burst=5 nodelay;
        
        # Remove /api prefix when forwarding
        rewrite ^/api(.*)$ $1 break;
        
        # Basic authentication simulation
        # In production, integrate with JWT/OAuth
        if ($http_authorization = "") {
            add_header WWW-Authenticate "Bearer" always;
            return 401 '{"error": "Authorization header required"}';
        }
        
        # Forward to load balancer
        proxy_pass http://load_balancer;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Gateway "api-gateway";
        
        # CORS headers
        add_header Access-Control-Allow-Origin *;
        add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS";
        add_header Access-Control-Allow-Headers "Authorization, Content-Type";
        
        # Handle preflight requests
        if ($request_method = 'OPTIONS') {
            return 204;
        }
    }
    
    # Public endpoints (no auth required)
    location /public/ {
        limit_req zone=api_limit burst=10 nodelay;
        
        rewrite ^/public(.*)$ $1 break;
        proxy_pass http://load_balancer;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    }
}